By looking at the constraints of a problem, we can often "guess" the solution.

Common time complexities

Let n be the main variable in the problem.

If n ≤ 12, the time complexity can be O(n!).
If n ≤ 25, the time complexity can be O(2^n).
If n ≤ 100, the time complexity can be O(n^4).
If n ≤ 500, the time complexity can be O(n^3).
If n ≤ 10^4, the time complexity can be O(n^2).
If n ≤ 10^6, the time complexity can be O(n log n).
If n ≤ 10^8, the time complexity can be O(n).
If n > 10^8, the time complexity can be O(log n), O(sqrt(n)) or O(1).
Examples of each common time complexity

O(n!) [Factorial time]: Permutations of 1 ... n
O(2^n) [Exponential time]: Exhaust all subsets of an array of size n
O(n^3) [Cubic time]: Exhaust all triangles with side length less than n
O(n^2) [Quadratic time]: Slow comparison-based sorting (eg. Bubble Sort, Insertion Sort, Selection Sort)
O(n log n) [Linearithmic time]: Fast comparison-based sorting (eg. Merge Sort)
O(n) [Linear time]: Linear Search (Finding maximum/minimum element in a 1D array), Counting Sort
O(log n) [Logarithmic time]: Binary Search, finding GCD (Greatest Common Divisor) using Euclidean Algorithm
O(sqrt(n))
O(1) [Constant time]: Calculation (eg. Solving linear equations in one unknown)
Explanations based on Codeforces problems

What's the Time complexity #Required to solve this problem?


The earlier response didn’t completely address the problem due to a slight misunderstanding about the setup of ***. Correct this here:

### Revised Logic



