{
'algorithms': ['Quick Sort', 'Merge Sort', 'Insertion Sort', 'Bucket Sort', 'Heap Sort', 'Selection Sort', 'Bubble Sort', 'Shell Sort', 'Radix Sort', 'Counting Sort', 'Binary Search', 'Linear Search', 'Depth First Search', 'Breadth First Search', 'Floyd’s Warshall', 'Dijkstra’s', 'Kruskal’s', 'Prim’s', 'Sieve of Eratosthenes', 'Bellman Ford', 'Huffman Coding', 'KMP Algorithm']
}
{"algorithms": ["Bubble Sort", "Merge Sort", "Insertion Sort", "Quick Sort", "Heap Sort", "Radix Sort", "Bucket Sort", "Selection Sort", "Shell Sort", "Counting Sort", "Breadth-First Search", "Depth-First Search", "Binary Search", "Linear Search", "Dijkstra's Algorithm", "Prim's Algorithm", "Kruskal's Algorithm", "Huffman Coding", "Naive Bayes Classifier", "K-Means Clustering", "Support Vector Machines", "Decision Trees", "Random Forest", "Neural Networks", "Genetic Algorithm", "Gradient Descent", "Backpropagation", "Gauss-Jordan Elimination", "Floyd-Warshall Algorithm", "Bellman-Ford Algorithm"]}
{
  "algorithms": [
    "A* Search", 
    "Binary Search", 
    "Merge Sort", 
    "Quick Sort", 
    "Hashing", 
    "Dijkstra’s Algorithm", 
    "Floyd-Warshall Algorithm", 
    "Linear Search", 
    "Depth-First Search", 
    "Breadth-First Search", 
    "Greedy Algorithms", 
    "Kruskal’s Algorithm", 
    "Prim’s Algorithm", 
    "Bellman-Ford Algorithm", 
    "Knapsack Problem", 
    "Job Sequencing Problem", 
    "Huffman Coding", 
    "K-Means Clustering", 
    "Hierarchical Clustering",
    "Support Vector Machine (SVM)",
    "K-Nearest Neighbors",
    "Decision Trees",
    "Linear Regression",
    "Logistic Regression",
    "Artificial Neural Networks",
    "Naive Bayes",
    "Random Forests"
  ]
}
{
  "algorithms": [
    "Bubble Sort",
    "Merge Sort",
    "Quick Sort",
    "Binary Search",
    "Breadth-First Search",
    "Depth-First Search",
    "Dijkstra's algorithm",
    "Floyd-Warshall algorithm",
    "A* algorithm",
    "Genetic Algorithm"
  ]
}
{
  "algorithms": [
    "Bubble Sort",
    "Merge Sort",
    "Quick Sort",
    "Insertion Sort",
    "Selection Sort",
    "Binary Search",
    "Breadth-First Search",
    "Depth-First Search",
    "Dijkstra's Algorithm",
    "A* Search Algorithm",
    "Kruskal's Algorithm",
    "Prim's Algorithm"
  ]
}
{
  "algorithms": [
    "Bubble Sort",
    "Merge Sort",
    "Quick Sort",
    "Insertion Sort",
    "Selection Sort",
    "Radix Sort",
    "Heap Sort"
  ]
}
{
  "algorithms": [
    "Bubble Sort",
    "Selection Sort",
    "Insertion Sort",
    "Merge Sort",
    "Quick Sort",
    "Heap Sort",
    "Radix Sort",
    "Binary Search",
    "Depth First Search",
    "Breadth First Search"
  ]
}
{
  "algorithms": [
    "Bubble Sort",
    "Merge Sort",
    "Quick Sort",
    "Binary Search",
    "Depth First Search",
    "Breadth First Search"
  ]
}
{
  "algorithms": [
    "Bubble Sort",
    "Quick Sort",
    "Merge Sort",
    "Insertion Sort",
    "Selection Sort",
    "Binary Search",
    "Depth First Search",
    "Breadth First Search",
    "Dijkstra's Algorithm",
    "Prim's Algorithm"
  ]
}
{
   "algorithms": [
      "Bubble Sort",
      "Merge Sort",
      "Quick Sort",
      "Insertion Sort",
      "Selection Sort",
      "Binary Search",
      "Breadth First Search",
      "Depth First Search",
      "Dijkstra's Algorithm",
      "A* Search Algorithm"
   ]
}
{
  "algorithms": [
    "Bubble Sort",
    "Selection Sort",
    "Merge Sort",
    "Quick Sort",
    "Insertion Sort",
    "Binary Search",
    "Depth First Search",
    "Breadth First Search",
    "Dijkstra's Algorithm",
    "Floyd-Warshall Algorithm",
    "Bellman-Ford Algorithm",
    "Prim's Algorithm",
    "Kruskal's Algorithm",
    "A* Search",
    "Genetic Algorithm",
    "Simulated Annealing",
    "Ant Colony Optimization"
  ]
}
{
  "algorithms": [
    "Dynamic Programming",
    "Breadth-First Search",
    "Depth-First Search",
    "Binary Search",
    "Dijkstra's Algorithm",
    "A* Search Algorithm",
    "Floyd-Warshall Algorithm",
    "Prim's Algorithm",
    "Kruskal's Algorithm",
    "KMP Algorithm",
    "Suffix Array",
    "Z-algorithm",
    "Segment Trees",
    "Convex Hull Algorithm",
    "Bayesian Inference",
    "Divide and Conquer",
    "Backtracking",
    "Greedy Algorithm",
    "Integer Programming",
    "Levenshtein Distance",
    "Rabin-Karp Algorithm",
    "Union-Find Disjoint Sets",
    "Mo's Algorithm",
    "Bellman-Ford Algorithm",
    "Johnson’s Algorithm",
    "Tarjan’s Algorithm",
    "Huffman Coding",
    "Knapsack Problem",
    "Travelling Salesman Problem",
    "Topological Sorting",
    "Graph Coloring",
    "Hamiltonian Cycle"
  ]
}
{
  "algorithms": [
    "Greedy",
    "Divide and Conquer",
    "Dynamic Programming",
    "Depth-First Search",
    "Breadth-First Search",
    "Binary Search",
    "Dijkstra's Algorithm",
    "Floyd-Warshall",
    "Bellman-Ford",
    "Knapsack",
    "Travelling Salesman",
    "A* algorithm",
    "Graph theory",
    "Hash Functions",
    "Kruskal's algorithm",
    "Knuth-Morris-Pratt (KMP)",
    "Prim's algorithm",
    "Bucket Sort",
    "Merge Sort",
    "Heap Sort",
    "QuickSort",
    "Tree Data Structures",
    "Prefix sum Array",
    "Heap",
    "Depth limited search",
    "Monte Carlo method",
    "Suffix Array/Trees",
    "Segment Trees",
    "Trie",
    "Strassen's Matrix Multiplication",
    "Artificial Neural Networks",
    "Genetic Algorithms",
    "Matrix Exponentiation"
  ]
}
{
"algorithms":[
"Travelling Salesman Problem Algorithm",
"Dynamic Programming",
"Genetic Algorithms",
"Backtracking",
"Neural Networks",
"Support Vector Machines",
"Fractional Knapsack Problem Algorithm",
"Longest Increasing Subsequence",
"Hierarchical Clustering",
"Kruskal’s Minimum Spanning Tree Algorithm",
"Prim’s Minimum Spanning Tree Algorithm",
"Dijkstra's Shortest Path Algorithm",
"Johnson’s Algorithm",
"Floyd Warshall Algorithm",
"Breadth First Search",
"Depth First Search",
"Bellman–Ford Algorithm",
"Knapsack Problem Algorithm",
"Artificial Neural Networks",
"Convolutional Neural Networks",
"Recurrent Neural Networks",
"Deep Belief Networks",
"Radial Basis Function Networks",
"Restricted Boltzmann Machines",
"Self Organizing Maps",
"Decentralized Consensus Algorithms",
"QuickSort",
"MergeSort",
"HeapSort",
"ShellSort",
"Gray Code",
"Naive Pattern Searching Algorithm",
"Rabin-Karp Algorithm",
"Boyer Moore Algorithm"
]
}
{
  "algorithms": [
    "Backpropagation",
    "Viterbi Algorithm",
    "Sieve of Eratosthenes",
    "Perceptron Algorithm",
    "Floyd Warshall Algorithm",
    "Ford-Fulkerson Algorithm",
    "Dijkstra’s Algorithm",
    "Kruskals Algorithm",
    "Bellman-Ford Algorithm",
    "Hungarian Algorithm",
    "Prim’s Algorithm",
    "Travelling Salesman Problem Algorithm",
    "Graph Coloring Algorithm",
    "Breadth First Search Algorithm",
    "Depth First Search Algorithm",
    "Binary Search Algorithm",
    "Quick Sort Algorithm",
    "Merge Sort Algorithm",
    "Intro Sort Algorithm",
    "Heap Sort Algorithm",
    "Knapsack Problem Algorithm",
    "Levenshtein Distance Algorithm",
    "Jaccard Similarity Algorithm",
    "K-Nearest Neighbor Algorithm",
    "K-Means Clustering Algorithm",
    "Naive Bayes Algorithm",
    "Support Vector Machine Algorithm",
    "Decision Tree Algorithm",
    "Random Forest Algorithm",
    "Convolutional Neural Network Algorithm",
    "Bidirectional A* Algorithm"
  ]
}
{'algorithms': ['Bubble Sort', 'Quick Sort', 'Merge Sort', 'Binary Search', 'Dijkstra\'s Algorithm']}
{
  "algorithms": [
    "Bubble Sort",
    "Binary Search",
    "Quick Sort",
    "Depth First Search",
    "A* Search"
  ]
}
{'algorithms':['Quick Sort', 'Heap Sort', 'Merge Sort', 'Intro Sort', 'Shell Sort']}
{'algorithms': ['QuickSort', 'MergeSort', 'HeapSort', 'RadixSort', 'Binary Search']}
`
`
`
j
s
o
n


{


 
 
"
a
l
g
o
r
i
t
h
m
s
"
:
 
[


 
 
 
 
"
F
a
s
t
 
F
o
u
r
i
e
r
 
T
r
a
n
s
f
o
r
m
 
(
F
F
T
)
"
,


 
 
 
 
"
A
K
S
 
P
r
i
m
a
l
i
t
y
 
T
e
s
t
"
,


 
 
 
 
"
U
k
k
o
n
e
n
'
s
 
A
l
g
o
r
i
t
h
m
 
f
o
r
 
S
u
f
f
i
x
 
T
r
e
e
 
C
o
n
s
t
r
u
c
t
i
o
n
"
,


 
 
 
 
"
S
t
r
a
s
s
e
n
'
s
 
A
l
g
o
r
i
t
h
m
 
f
o
r
 
M
a
t
r
i
x
 
M
u
l
t
i
p
l
i
c
a
t
i
o
n
"
,


 
 
 
 
"
I
n
t
e
r
i
o
r
 
P
o
i
n
t
 
M
e
t
h
o
d
s
 
f
o
r
 
L
i
n
e
a
r
 
P
r
o
g
r
a
m
m
i
n
g
"


 
 
]


}


`
`
`
`
`
`
j
s
o
n


{


 
 
"
a
l
g
o
r
i
t
h
m
s
"
:
 
[


 
 
 
 
"
F
a
s
t
 
F
o
u
r
i
e
r
 
T
r
a
n
s
f
o
r
m
"
,


 
 
 
 
"
S
t
r
a
s
s
e
n
'
s
 
M
a
t
r
i
x
 
M
u
l
t
i
p
l
i
c
a
t
i
o
n
"
,


 
 
 
 
"
C
o
p
p
e
r
s
m
i
t
h
–
W
i
n
o
g
r
a
d
 
A
l
g
o
r
i
t
h
m
"
,


 
 
 
 
"
H
o
p
c
r
o
f
t
-
K
a
r
p
 
A
l
g
o
r
i
t
h
m
"
,


 
 
 
 
"
A
*
 
S
e
a
r
c
h
 
A
l
g
o
r
i
t
h
m
"


 
 
]


}


`
`
`
```json
{
  "algorithms": [
    "AKS Primality Test",
    "Schönhage-Strassen Algorithm",
    "Strassen's Matrix Multiplication",
    "Fast Fourier Transform (FFT)",
    "Hopcroft-Karp Algorithm"
  ]
}
```
```json
{
  "algorithms": [
    "Suffix Automaton",
    "Heavy-Light Decomposition",
    "Dinic's Algorithm",
    "Centroid Decomposition",
    "Fast Fourier Transform"
  ]
}
```
```json
{
  "algorithms": [
    "Suffix Automaton",
    "Heavy-Light Decomposition",
    "Centroid Decomposition",
    "Dinic's Algorithm",
    "Hungarian Algorithm",
    "Convex Hull Trick",
    "Bitmask Dynamic Programming",
    "Fast Fourier Transform",
    "Link-Cut Trees",
    "Aho-Corasick Automaton",
    "Binary Lifting",
    "Matrix Exponentiation",
    "Euler Tour Technique",
    "Mo's Algorithm",
    "Sqrt Decomposition",
    "Treap",
    "Persistent Segment Trees",
    "Tarjan's Algorithm",
    "Hopcroft-Karp Algorithm",
    "Kruskal's Algorithm with DSU Optimization"
  ]
}
```
```json
{
  "algorithms": [
    "Trie",
    "Suffix Automaton",
    "Heavy-Light Decomposition",
    "Dinic's Algorithm",
    "Aho-Corasick Automaton",
    "Fenwick Tree (Binary Indexed Tree)",
    "Treap",
    "Segment Tree with Lazy Propagation",
    "Disjoint Set Union (Union-Find) with Rollback",
    "Mo's Algorithm",
    "Hopcroft-Karp Algorithm",
    "K-D Tree",
    "Convex Hull Trick",
    "Link-Cut Trees",
    "Fast Fourier Transform (FFT)",
    "Matrix Exponentiation",
    "Euler Tour Technique",
    "Sqrt Decomposition",
    "Bitmask Dynamic Programming",
    "Persistent Data Structures"
  ]
}
```
```json
{
  "algorithms": [
    "Suffix Automaton",
    "Heavy Light Decomposition",
    "Centroid Decomposition",
    "Dinic's Algorithm",
    "Aho-Corasick Automaton",
    "Mo's Algorithm",
    "Link-Cut Trees",
    "Splay Trees",
    "Fast Fourier Transform (FFT)",
    "Convex Hull Trick",
    "Tarjan's Algorithm for Strongly Connected Components",
    "Euler Tour Technique",
    "Bitmask Dynamic Programming",
    "Meet in the Middle",
    "Persistent Data Structures",
    "Wavelet Trees",
    "Implicit Treap",
    "Matrix Exponentiation",
    "Maximum Flow with Dinic's Algorithm",
    "Kruskal's Algorithm with Union-Find Optimization"
  ]
}
```
